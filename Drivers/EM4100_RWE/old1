/*
 * T5557_5577.c
 *
 *  Created on: 24 мая 2021 г.
 *      Author: tochk
 *      Запись данных на метки T5557, T5577 производства Atmel
 */

#include "T5557_5577.h"

/* Приоритеты обработчиков прерываний */
#define CARRIER_ISR_PRIORITY						6

/*	Периферия генератора 125КГц   [Carrier_125K]*/
#define	CARRIER_TIMER									TIM3
#define	CARRIER_TIMER_CHANNEL				LL_TIM_CHANNEL_CH3
#define	CARRIER_GPIO									GPIOB
#define	CARRIER_GPIO_PIN							LL_GPIO_PIN_0
#define	CARRIER_TIMER_UP_IRQHandler	TIM3_IRQHandler

#define CARRIER_FREQUENCY						125000U	// Частота несущей




/* Данные на карту передаются посредством включения/отключения несущей
    на определенные временные промежутки, которые представлены ниже
    в виде полных циклов периода несущей. (FC)		*/
#define S_GAP_FC			25	// инициация начала передачи данных, F-выкл (по ДШ 10 - 50)
#define W_GAP_FC			20	// промежуток между битами данных, F-выкл (по ДШ 8 - 30)
#define DATA_0_FC			24	// бит данных '0', F-вкл	(по ДШ 16 - 31)
#define DATA_1_FC			56	// бит данных '1', F-вкл	(по ДШ 48 - 63)

/* Opcodes*/
#define OPC_RESET						0x00
#define OPC_TESTMODE			0x01
#define OPC_WRITE_PAGE_0		0x02
#define OPC_WRITE_PAGE_1		0x03

/* Configuration data (block 0) */
#define CD_LOCK_BIT												(uint32_t)(1<<0)
#define CD_SAFER_KEY											(uint32_t)(0b0110<<1)
#define CD_BIT_RATE_RF8										(uint32_t)(0b000<<12)
#define CD_BIT_RATE_RF16									(uint32_t)(0b100<<12)
#define CD_BIT_RATE_RF32									(uint32_t)(0b010<<12)
#define CD_BIT_RATE_RF40									(uint32_t)(0b110<<12)
#define CD_BIT_RATE_RF40									(uint32_t)(0b001<<12)
#define CD_BIT_RATE_RF64									(uint32_t)(0b101<<12)
#define CD_BIT_RATE_RF100									(uint32_t)(0b011<<12)
#define CD_BIT_RATE_RF128									(uint32_t)(0b111<<12)
#define CD_MODULATION_DIRECT						(uint32_t)(0b00000<<16)
#define CD_MODULATION_PSK1							(uint32_t)(0b10000<<16)
#define CD_MODULATION_PSK2							(uint32_t)(0b01000<<16)
#define CD_MODULATION_PSK3							(uint32_t)(0b11000<<16)
#define CD_MODULATION_FSK1							(uint32_t)(0b00100<<16)
#define CD_MODULATION_FSK2							(uint32_t)(0b10100<<16)
#define CD_MODULATION_FSK1A						(uint32_t)(0b01100<<16)
#define CD_MODULATION_FSK2A						(uint32_t)(0b11100<<16)
#define CD_MODULATION_MANCHESTER			(uint32_t)(0b00010<<16)
#define CD_MODULATION_BIPHASE50				(uint32_t)(0b00001<<16)
#define CD_PSK_CF_RF2											(uint32_t)(0b00<<21)
#define CD_PSK_CF_RF4											(uint32_t)(0b10<<21)
#define CD_PSK_CF_RF8											(uint32_t)(0b01<<21)
#define CD_PWD_BIT												(uint32_t)(1<<28)
#define CD_MAX_BLOCK_1										(uint32_t)(0b100<<25)
#define CD_MAX_BLOCK_2										(uint32_t)(0b010<<25)


////////////////////////////////////////// Машина состояний  ///////////////////////////////////////////
/* Вызов машины на каждом цикле периода несущей (FC)
 * (переполнение таймера генератора несущей) */

/* Возможные состояния */
typedef enum {
	STANDARTWRITE__MUTE = 0,
	STANDARTWRITE__SGAP,
	STANDARTWRITE__OP_CODE,
	STANDARTWRITE__LOCK_BIT,
	STANDARTWRITE__BLOCK_DATA,
	STANDARTWRITE__BLOCK_ADDR,
	STANDARTWRITE__IDLE
}	WritterState_t;

typedef struct{
	uint8_t	OpCode;
	uint8_t	LockBit;
	uint32_t	BlockData;
	uint8_t	BlockAddr;
}	WritterData_t;

__IO WritterData_t		smWritterData;
__IO WritterState_t 	smWritterState;		// текущие состояния
__IO uint32_t				smCountFC;			// счетчик циклов периода несущей (FC)
__IO uint32_t				smCountStep;			// счетчик записаных бит
__IO	uint32_t				smEdgeFC;

void fsmStart(void);
void fsmStop(void);
void fsmStandartWriteMute(void);
void fsmStandartWriteSGap(void);
void fsmStandartWriteOpCode(void);
void fsmStandartWriteLockBit(void);
void fsmStandartWriteBlockData(void);
void fsmStandartWriteBlockAddr(void);

// Массив указателей на функции-обработчики состояний (реализация вызова машины состояний)
void (*fsWritterState[])() = {fsmStandartWriteMute, fsmStandartWriteSGap, fsmStandartWriteOpCode, fsmStandartWriteLockBit,
												fsmStandartWriteBlockData, fsmStandartWriteBlockAddr};
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


uint32_t MakeConfigurationBlock(void);
__STATIC_INLINE void Carrier_ON(void);
__STATIC_INLINE void Carrier_OFF(void);


__IO uint32_t temp = 0;


/*
 * Прерывание таймера декодера - обновление
 */
void CARRIER_TIMER_UP_IRQHandler(void)
{
	// Если счетчик отсчитал до конца (за период счета активных перепадов не детектировано),
	// сбрасываем состояние декодера
	if (LL_TIM_IsActiveFlag_UPDATE(CARRIER_TIMER))
	{
		LL_TIM_ClearFlag_UPDATE (CARRIER_TIMER);

		fsWritterState[smWritterState]();
	}
}


void T5577_Init(void)
{
	LL_TIM_InitTypeDef 			TIM_InitStruct = 			{0};
	LL_TIM_OC_InitTypeDef 	TIM_OC_InitStruct = 		{0};
	LL_TIM_IC_InitTypeDef		TIM_IC_InitStruct = 		{0};
	LL_GPIO_InitTypeDef			GPIO_InitStruct =			{0};

	/*  	Генератор несущей 125КГц (таймер в режиме PWM)	*/
	uint32_t pwmPeriod = (uint32_t)(SystemCoreClock/CARRIER_FREQUENCY);

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
	TIM_InitStruct.Prescaler = 1 - 1;
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
	TIM_InitStruct.Autoreload = pwmPeriod - 1 ;
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
	LL_TIM_Init(CARRIER_TIMER, &TIM_InitStruct);
	LL_TIM_DisableARRPreload(CARRIER_TIMER);
	LL_TIM_OC_EnablePreload(CARRIER_TIMER, CARRIER_TIMER_CHANNEL);
	TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
	TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
	TIM_OC_InitStruct.CompareValue = (uint32_t)(pwmPeriod / 2);
	TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
	LL_TIM_OC_Init(CARRIER_TIMER, CARRIER_TIMER_CHANNEL, &TIM_OC_InitStruct);
	LL_TIM_OC_DisableFast(CARRIER_TIMER, CARRIER_TIMER_CHANNEL);
	LL_TIM_SetTriggerOutput(CARRIER_TIMER, LL_TIM_TRGO_RESET);
	LL_TIM_DisableMasterSlaveMode(CARRIER_TIMER);

	// Прерывание по переполнению
	LL_TIM_EnableIT_UPDATE(CARRIER_TIMER);
	NVIC_SetPriority(TIM3_IRQn, CARRIER_ISR_PRIORITY);
	NVIC_EnableIRQ(TIM3_IRQn);
	if (LL_TIM_IsActiveFlag_UPDATE (CARRIER_TIMER))
	{
		LL_TIM_ClearFlag_UPDATE (CARRIER_TIMER);
	}

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
	GPIO_InitStruct.Pin = CARRIER_GPIO_PIN;
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
	GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
	LL_GPIO_Init(CARRIER_GPIO, &GPIO_InitStruct);

	//Carrier_ON();
	//LL_TIM_EnableCounter(CARRIER_TIMER);
	 //fsmStop();
	 smWritterState = STANDARTWRITE__IDLE;
}

/*
 * Несущая выкл.
 */
__STATIC_INLINE void Carrier_ON(void)
{
	LL_TIM_CC_EnableChannel(CARRIER_TIMER, CARRIER_TIMER_CHANNEL);
	//LL_TIM_EnableCounter(CARRIER_TIMER);
}

/*
 * Несущая вкл.
 */
__STATIC_INLINE void Carrier_OFF(void)
{
	//LL_TIM_DisableCounter(CARRIER_TIMER);
	LL_TIM_CC_DisableChannel(CARRIER_TIMER, CARRIER_TIMER_CHANNEL);
	//LL_GPIO_ResetOutputPin(CARRIER_GPIO, CARRIER_GPIO_PIN);
}



/*
 * Сборка конфигурационного блока (Block 0)
 */
uint32_t MakeConfigurationBlock(void)
{
	uint32_t blockData = 0;

	// Safer key
	blockData |= CD_SAFER_KEY;
	// Data bit-rate
	blockData |= CD_BIT_RATE_RF64;
	// Modulation
	blockData |=CD_MODULATION_MANCHESTER;
	// PWD (password off)
	blockData |=CD_PWD_BIT;
	// Max block (1)
	blockData |=CD_MAX_BLOCK_1;

	return blockData;
}

/*
 * Сборка блока данных метки (Block 0)
 */
uint32_t MakeDataBlock(void)
{
	uint32_t blockData = 0;


}

/*
 * Стандартная запись блока
 */
void StandartWrite(uint8_t opCode, uint8_t lockBit, uint32_t blockData, uint8_t blockAddr)
{
	smCountFC = 0;
	smCountStep = 0;
	smWritterState = STANDARTWRITE__SGAP;

	smWritterData.OpCode = opCode;
	smWritterData.LockBit = lockBit;
	smWritterData.BlockData = blockData;
	smWritterData.BlockAddr = blockAddr;

	//Carrier_ON();
	fsmStart();

	/*
	smWritterData.OpCode = OPC_WRITE_PAGE_0;
	smWritterData.LockBit = 0x00;
	smWritterData.BlockData = MakeConfigurationBlock
	*/
}

/*
 * Запуск машины состояний
 */
void fsmStart(void)
{
	LL_TIM_EnableCounter(CARRIER_TIMER);
}

/*
 * Остановка машины состояний
 */
void fsmStop(void)
{
	LL_TIM_DisableCounter(CARRIER_TIMER);
}

/*
 * Выдерживаем Start Gap
 */
void fsmStandartWriteSGap(void)
{
	smCountFC ++;
	if (smCountFC == 1)
		Carrier_OFF();

	if (smCountFC == S_GAP_FC)
	{
		smCountFC = 0;
		smCountStep = 0;
		smEdgeFC = ((smWritterData.OpCode >> 1) & 0x01) ? DATA_1_FC : DATA_0_FC;
		Carrier_ON();
		smWritterState = STANDARTWRITE__OP_CODE;
	}
}

__IO	uint32_t smEdgeFC;

void fsmStandartWriteOpCode(void)
{
	smCountFC ++;

	 if (smCountFC < smEdgeFC)
		 return;

	 smCountStep ++;
	 if (smCountStep > 2)
	 {
			smCountFC = 0;
			smCountStep = 0;
			smEdgeFC = W_GAP_FC;
			Carrier_OFF();
			smWritterState = STANDARTWRITE__LOCK_BIT;
	 }
	 if (smCountStep % 2)
	 {
		 smCountFC = 0;
		 smEdgeFC = W_GAP_FC;
		 Carrier_OFF();
	 }
	 else
	 {
		 smCountFC = 0;
		 smEdgeFC = ((smWritterData.OpCode >> (1 - (smCountStep / 2))) & 0x01) ? DATA_1_FC : DATA_0_FC;
		 Carrier_ON();
	 }
}

void fsmStandartWriteLockBit(void)
{
	smCountFC ++;

	 if (smCountFC < smEdgeFC)
		 return;

	 smCountStep ++;
	 if (smCountStep > 1)
	 {
			smCountFC = 0;
			smCountStep = 0;
			smEdgeFC = W_GAP_FC;
			Carrier_OFF();
			smWritterState = STANDARTWRITE__BLOCK_DATA;
	 }
	 if (smCountStep % 2)
	 {
		 smCountFC = 0;
		 smEdgeFC = (smWritterData.LockBit & 0x01) ? DATA_1_FC : DATA_0_FC;
		 Carrier_ON();
	 }
	 else
	 {
		 smCountFC = 0;
		 smEdgeFC = W_GAP_FC;
		 Carrier_OFF();
	 }
}

void fsmStandartWriteBlockData(void)
{
	smCountFC ++;

	 if (smCountFC < smEdgeFC)
		 return;

	 smCountStep ++;
	 if (smCountStep > 63)
	 {
			smCountFC = 0;
			smCountStep = 0;
			smEdgeFC = W_GAP_FC;
			Carrier_OFF();
			smWritterState = STANDARTWRITE__BLOCK_ADDR;
	 }
	 if (smCountStep % 2)
	 {
		 smCountFC = 0;
		 smEdgeFC = ((smWritterData.BlockData >> (31 - (smCountStep / 2))) & 0x01) ? DATA_1_FC : DATA_0_FC;
		 Carrier_ON();
	 }
	 else
	 {
		 smCountFC = 0;
		 smEdgeFC = W_GAP_FC;
		 Carrier_OFF();
	 }
}

void fsmStandartWriteBlockAddr(void)
{
	smCountFC ++;

	 if (smCountFC < smEdgeFC)
		 return;

	 smCountStep ++;
	 if (smCountStep > 5)
	 {
			smCountFC = 0;
			smCountStep = 0;
			smEdgeFC = W_GAP_FC;
			Carrier_OFF();
			smWritterState = STANDARTWRITE__MUTE;
	 }
	 if (smCountStep % 2)
	 {
		 smCountFC = 0;
		 smEdgeFC = ((smWritterData.BlockAddr >> (2 - (smCountStep / 2))) & 0x01) ? DATA_1_FC : DATA_0_FC;
		 Carrier_ON();
	 }
	 else
	 {
		 smCountFC = 0;
		 smEdgeFC = W_GAP_FC;
		 Carrier_OFF();
	 }
}

void fsmStandartWriteMute(void)
{
	smCountFC ++;

	 if (smCountFC < smEdgeFC)
		 return;

	 fsmStop();
	 smWritterState = STANDARTWRITE__IDLE;
}



void T5577_TEST(void)
{
	while (smWritterState != STANDARTWRITE__IDLE)
		;
	StandartWrite(0x10, 0x01, MakeConfigurationBlock(), 0);
}